<?php
/*-------------------------------------------------------+
| Project 60 - CiviBanking                               |
| Copyright (C) 2013-2021 SYSTOPIA                       |
| Author: B. Endres (endres -at- systopia.de)            |
| http://www.systopia.de/                                |
+--------------------------------------------------------+
| This program is released as free software under the    |
| Affero GPL v3 license. You can redistribute it and/or  |
| modify it under the terms of this license which you    |
| can read by viewing the included agpl.txt or online    |
| at www.gnu.org/licenses/agpl.html. Removal of this     |
| copyright header is strictly prohibited without        |
| written permission from the original author(s).        |
+--------------------------------------------------------*/

/**
 * @package CRM
 * @copyright CiviCRM LLC https://civicrm.org/licensing
 *
 * Generated from org.project60.banking/xml/schema/CRM/Banking/BankAccountReference.xml
 * DO NOT EDIT.  Generated by CRM_Core_CodeGen
 * (GenCodeChecksum:bb7bc74251946c384f5ef61a33543564)
 */
use CRM_Banking_ExtensionUtil as E;

/**
 * Database access object for the BankAccountReference entity.
 */
class CRM_Banking_DAO_BankAccountReference extends CRM_Core_DAO {
  const EXT = E::LONG_NAME;
  const TABLE_ADDED = '4.3';

  /**
   * Static instance to hold the table name.
   *
   * @var string
   */
  public static $_tableName = 'civicrm_bank_account_reference';

  /**
   * Should CiviCRM log any modifications to this table in the civicrm_log table.
   *
   * @var bool
   */
  public static $_log = TRUE;

  /**
   * ID
   *
   * @var int
   */
  public $id;

  /**
   * The value for this account
   *
   * @var string
   */
  public $reference;

  /**
   * Link to an option list
   *
   * @var int
   */
  public $reference_type_id;

  /**
   * FK to bank_account of target account
   *
   * @var int
   */
  public $ba_id;

  /**
   * Class constructor.
   */
  public function __construct() {
    $this->__table = 'civicrm_bank_account_reference';
    parent::__construct();
  }

  /**
   * Returns localized title of this entity.
   *
   * @param bool $plural
   *   Whether to return the plural version of the title.
   */
  public static function getEntityTitle($plural = FALSE) {
    return $plural ? E::ts('Bank Account References') : E::ts('Bank Account Reference');
  }

  /**
   * Returns foreign keys and entity references.
   *
   * @return array
   *   [CRM_Core_Reference_Interface]
   */
  public static function getReferenceColumns() {
    if (!isset(Civi::$statics[__CLASS__]['links'])) {
      Civi::$statics[__CLASS__]['links'] = static::createReferenceColumns(__CLASS__);
      Civi::$statics[__CLASS__]['links'][] = new CRM_Core_Reference_Basic(self::getTableName(), 'ba_id', 'civicrm_bank_account', 'id');
      CRM_Core_DAO_AllCoreTables::invoke(__CLASS__, 'links_callback', Civi::$statics[__CLASS__]['links']);
    }
    return Civi::$statics[__CLASS__]['links'];
  }

  /**
   * Returns all the column names of this table
   *
   * @return array
   */
  public static function &fields() {
    if (!isset(Civi::$statics[__CLASS__]['fields'])) {
      Civi::$statics[__CLASS__]['fields'] = [
        'id' => [
          'name' => 'id',
          'type' => CRM_Utils_Type::T_INT,
          'description' => E::ts('ID'),
          'required' => TRUE,
          'where' => 'civicrm_bank_account_reference.id',
          'export' => TRUE,
          'table_name' => 'civicrm_bank_account_reference',
          'entity' => 'BankAccountReference',
          'bao' => 'CRM_Banking_DAO_BankAccountReference',
          'localizable' => 0,
          'add' => '4.3',
        ],
        'reference' => [
          'name' => 'reference',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => E::ts('Reference value'),
          'description' => E::ts('The value for this account'),
          'maxlength' => 255,
          'size' => CRM_Utils_Type::HUGE,
          'where' => 'civicrm_bank_account_reference.reference',
          'table_name' => 'civicrm_bank_account_reference',
          'entity' => 'BankAccountReference',
          'bao' => 'CRM_Banking_DAO_BankAccountReference',
          'localizable' => 0,
          'add' => '4.3',
        ],
        'reference_type_id' => [
          'name' => 'reference_type_id',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('Reference type'),
          'description' => E::ts('Link to an option list'),
          'required' => TRUE,
          'where' => 'civicrm_bank_account_reference.reference_type_id',
          'table_name' => 'civicrm_bank_account_reference',
          'entity' => 'BankAccountReference',
          'bao' => 'CRM_Banking_DAO_BankAccountReference',
          'localizable' => 0,
          'add' => '4.3',
        ],
        'ba_id' => [
          'name' => 'ba_id',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('Bank Account ID'),
          'description' => E::ts('FK to bank_account of target account'),
          'where' => 'civicrm_bank_account_reference.ba_id',
          'table_name' => 'civicrm_bank_account_reference',
          'entity' => 'BankAccountReference',
          'bao' => 'CRM_Banking_DAO_BankAccountReference',
          'localizable' => 0,
          'FKClassName' => 'CRM_Banking_DAO_BankAccount',
          'add' => '4.3',
        ],
      ];
      CRM_Core_DAO_AllCoreTables::invoke(__CLASS__, 'fields_callback', Civi::$statics[__CLASS__]['fields']);
    }
    return Civi::$statics[__CLASS__]['fields'];
  }

  /**
   * Return a mapping from field-name to the corresponding key (as used in fields()).
   *
   * @return array
   *   Array(string $name => string $uniqueName).
   */
  public static function &fieldKeys() {
    if (!isset(Civi::$statics[__CLASS__]['fieldKeys'])) {
      Civi::$statics[__CLASS__]['fieldKeys'] = array_flip(CRM_Utils_Array::collect('name', self::fields()));
    }
    return Civi::$statics[__CLASS__]['fieldKeys'];
  }

  /**
   * Returns the names of this table
   *
   * @return string
   */
  public static function getTableName() {
    return self::$_tableName;
  }

  /**
   * Returns if this table needs to be logged
   *
   * @return bool
   */
  public function getLog() {
    return self::$_log;
  }

  /**
   * Returns the list of fields that can be imported
   *
   * @param bool $prefix
   *
   * @return array
   */
  public static function &import($prefix = FALSE) {
    $r = CRM_Core_DAO_AllCoreTables::getImports(__CLASS__, 'bank_account_reference', $prefix, []);
    return $r;
  }

  /**
   * Returns the list of fields that can be exported
   *
   * @param bool $prefix
   *
   * @return array
   */
  public static function &export($prefix = FALSE) {
    $r = CRM_Core_DAO_AllCoreTables::getExports(__CLASS__, 'bank_account_reference', $prefix, []);
    return $r;
  }

  /**
   * Returns the list of indices
   *
   * @param bool $localize
   *
   * @return array
   */
  public static function indices($localize = TRUE) {
    $indices = [
      'reference' => [
        'name' => 'reference',
        'field' => [
          0 => 'reference',
        ],
        'localizable' => FALSE,
        'sig' => 'civicrm_bank_account_reference::0::reference',
      ],
      'reftype' => [
        'name' => 'reftype',
        'field' => [
          0 => 'ba_id',
          1 => 'reference_type_id',
        ],
        'localizable' => FALSE,
        'sig' => 'civicrm_bank_account_reference::0::ba_id::reference_type_id',
      ],
    ];
    return ($localize && !empty($indices)) ? CRM_Core_DAO_AllCoreTables::multilingualize(__CLASS__, $indices) : $indices;
  }

}
