<?php
/*-------------------------------------------------------+
| Project 60 - CiviBanking                               |
| Copyright (C) 2013-2021 SYSTOPIA                       |
| Author: B. Endres (endres -at- systopia.de)            |
| http://www.systopia.de/                                |
+--------------------------------------------------------+
| This program is released as free software under the    |
| Affero GPL v3 license. You can redistribute it and/or  |
| modify it under the terms of this license which you    |
| can read by viewing the included agpl.txt or online    |
| at www.gnu.org/licenses/agpl.html. Removal of this     |
| copyright header is strictly prohibited without        |
| written permission from the original author(s).        |
+--------------------------------------------------------*/

/**
 * @package CRM
 * @copyright CiviCRM LLC https://civicrm.org/licensing
 *
 * Generated from org.project60.banking/xml/schema/CRM/Banking/BankTransaction.xml
 * DO NOT EDIT.  Generated by CRM_Core_CodeGen
 * (GenCodeChecksum:84ff2d15a88456f15097299e1b3432dd)
 */
use CRM_Banking_ExtensionUtil as E;

/**
 * Database access object for the BankTransaction entity.
 */
class CRM_Banking_DAO_BankTransaction extends CRM_Core_DAO {
  const EXT = E::LONG_NAME;
  const TABLE_ADDED = '4.3';

  /**
   * Static instance to hold the table name.
   *
   * @var string
   */
  public static $_tableName = 'civicrm_bank_tx';

  /**
   * Should CiviCRM log any modifications to this table in the civicrm_log table.
   *
   * @var bool
   */
  public static $_log = TRUE;

  /**
   * ID
   *
   * @var int
   */
  public $id;

  /**
   * The unique reference for this transaction
   *
   * @var string
   */
  public $bank_reference;

  /**
   * Value date for this bank transaction
   *
   * @var datetime
   */
  public $value_date;

  /**
   * Booking date for this bank transaction
   *
   * @var datetime
   */
  public $booking_date;

  /**
   * Transaction amount (positive or negative)
   *
   * @var float
   */
  public $amount;

  /**
   * Currency for the amount of the transaction
   *
   * @var string
   */
  public $currency;

  /**
   * Link to an option list
   *
   * @var int
   */
  public $type_id;

  /**
   * Link to an option list
   *
   * @var int
   */
  public $status_id;

  /**
   * The complete information received for this transaction
   *
   * @var text
   */
  public $data_raw;

  /**
   * A JSON-formatted array containing decoded fields
   *
   * @var text
   */
  public $data_parsed;

  /**
   * FK to bank_account of target account
   *
   * @var int
   */
  public $ba_id;

  /**
   * FK to bank_account of party account
   *
   * @var int
   */
  public $party_ba_id;

  /**
   * FK to parent bank_tx_batch
   *
   * @var int
   */
  public $tx_batch_id;

  /**
   * Numbering local to the tx_batch_id
   *
   * @var int
   */
  public $sequence;

  /**
   * A JSON-formatted array containing suggestions
   *
   * @var text
   */
  public $suggestions;

  /**
   * Class constructor.
   */
  public function __construct() {
    $this->__table = 'civicrm_bank_tx';
    parent::__construct();
  }

  /**
   * Returns localized title of this entity.
   *
   * @param bool $plural
   *   Whether to return the plural version of the title.
   */
  public static function getEntityTitle($plural = FALSE) {
    return $plural ? E::ts('Bank Transactions') : E::ts('Bank Transaction');
  }

  /**
   * Returns foreign keys and entity references.
   *
   * @return array
   *   [CRM_Core_Reference_Interface]
   */
  public static function getReferenceColumns() {
    if (!isset(Civi::$statics[__CLASS__]['links'])) {
      Civi::$statics[__CLASS__]['links'] = static::createReferenceColumns(__CLASS__);
      Civi::$statics[__CLASS__]['links'][] = new CRM_Core_Reference_Basic(self::getTableName(), 'ba_id', 'civicrm_bank_account', 'id');
      Civi::$statics[__CLASS__]['links'][] = new CRM_Core_Reference_Basic(self::getTableName(), 'party_ba_id', 'civicrm_bank_account', 'id');
      Civi::$statics[__CLASS__]['links'][] = new CRM_Core_Reference_Basic(self::getTableName(), 'tx_batch_id', 'civicrm_bank_tx_batch', 'id');
      CRM_Core_DAO_AllCoreTables::invoke(__CLASS__, 'links_callback', Civi::$statics[__CLASS__]['links']);
    }
    return Civi::$statics[__CLASS__]['links'];
  }

  /**
   * Returns all the column names of this table
   *
   * @return array
   */
  public static function &fields() {
    if (!isset(Civi::$statics[__CLASS__]['fields'])) {
      Civi::$statics[__CLASS__]['fields'] = [
        'id' => [
          'name' => 'id',
          'type' => CRM_Utils_Type::T_INT,
          'description' => E::ts('ID'),
          'required' => TRUE,
          'where' => 'civicrm_bank_tx.id',
          'export' => TRUE,
          'table_name' => 'civicrm_bank_tx',
          'entity' => 'BankTransaction',
          'bao' => 'CRM_Banking_DAO_BankTransaction',
          'localizable' => 0,
          'add' => '4.3',
        ],
        'bank_reference' => [
          'name' => 'bank_reference',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => E::ts('Unique Statement Reference'),
          'description' => E::ts('The unique reference for this transaction'),
          'required' => TRUE,
          'maxlength' => 64,
          'size' => CRM_Utils_Type::BIG,
          'where' => 'civicrm_bank_tx.bank_reference',
          'export' => TRUE,
          'table_name' => 'civicrm_bank_tx',
          'entity' => 'BankTransaction',
          'bao' => 'CRM_Banking_DAO_BankTransaction',
          'localizable' => 0,
          'add' => '4.3',
        ],
        'value_date' => [
          'name' => 'value_date',
          'type' => CRM_Utils_Type::T_DATE + CRM_Utils_Type::T_TIME,
          'title' => E::ts('Value date'),
          'description' => E::ts('Value date for this bank transaction'),
          'required' => TRUE,
          'where' => 'civicrm_bank_tx.value_date',
          'table_name' => 'civicrm_bank_tx',
          'entity' => 'BankTransaction',
          'bao' => 'CRM_Banking_DAO_BankTransaction',
          'localizable' => 0,
          'add' => '4.3',
        ],
        'booking_date' => [
          'name' => 'booking_date',
          'type' => CRM_Utils_Type::T_DATE + CRM_Utils_Type::T_TIME,
          'title' => E::ts('Booking date'),
          'description' => E::ts('Booking date for this bank transaction'),
          'required' => TRUE,
          'where' => 'civicrm_bank_tx.booking_date',
          'table_name' => 'civicrm_bank_tx',
          'entity' => 'BankTransaction',
          'bao' => 'CRM_Banking_DAO_BankTransaction',
          'localizable' => 0,
          'add' => '4.3',
        ],
        'amount' => [
          'name' => 'amount',
          'type' => CRM_Utils_Type::T_MONEY,
          'title' => E::ts('Transaction amount'),
          'description' => E::ts('Transaction amount (positive or negative)'),
          'required' => TRUE,
          'precision' => [
            20,
            2,
          ],
          'where' => 'civicrm_bank_tx.amount',
          'table_name' => 'civicrm_bank_tx',
          'entity' => 'BankTransaction',
          'bao' => 'CRM_Banking_DAO_BankTransaction',
          'localizable' => 0,
          'add' => '4.3',
        ],
        'currency' => [
          'name' => 'currency',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => E::ts('Currency'),
          'description' => E::ts('Currency for the amount of the transaction'),
          'maxlength' => 3,
          'size' => CRM_Utils_Type::FOUR,
          'where' => 'civicrm_bank_tx.currency',
          'dataPattern' => '/^[A-Z]{3}$/i',
          'table_name' => 'civicrm_bank_tx',
          'entity' => 'BankTransaction',
          'bao' => 'CRM_Banking_DAO_BankTransaction',
          'localizable' => 0,
          'add' => '4.3',
        ],
        'type_id' => [
          'name' => 'type_id',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('Bank Transaction Type'),
          'description' => E::ts('Link to an option list'),
          'required' => TRUE,
          'where' => 'civicrm_bank_tx.type_id',
          'table_name' => 'civicrm_bank_tx',
          'entity' => 'BankTransaction',
          'bao' => 'CRM_Banking_DAO_BankTransaction',
          'localizable' => 0,
          'add' => '4.3',
        ],
        'status_id' => [
          'name' => 'status_id',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('Bank Transaction Status'),
          'description' => E::ts('Link to an option list'),
          'required' => TRUE,
          'where' => 'civicrm_bank_tx.status_id',
          'table_name' => 'civicrm_bank_tx',
          'entity' => 'BankTransaction',
          'bao' => 'CRM_Banking_DAO_BankTransaction',
          'localizable' => 0,
          'add' => '4.3',
        ],
        'data_raw' => [
          'name' => 'data_raw',
          'type' => CRM_Utils_Type::T_TEXT,
          'title' => E::ts('Data Raw'),
          'description' => E::ts('The complete information received for this transaction'),
          'where' => 'civicrm_bank_tx.data_raw',
          'table_name' => 'civicrm_bank_tx',
          'entity' => 'BankTransaction',
          'bao' => 'CRM_Banking_DAO_BankTransaction',
          'localizable' => 0,
          'add' => '4.3',
        ],
        'data_parsed' => [
          'name' => 'data_parsed',
          'type' => CRM_Utils_Type::T_TEXT,
          'title' => E::ts('Data Parsed'),
          'description' => E::ts('A JSON-formatted array containing decoded fields'),
          'where' => 'civicrm_bank_tx.data_parsed',
          'table_name' => 'civicrm_bank_tx',
          'entity' => 'BankTransaction',
          'bao' => 'CRM_Banking_DAO_BankTransaction',
          'localizable' => 0,
          'add' => '4.3',
        ],
        'ba_id' => [
          'name' => 'ba_id',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('Bank Account ID'),
          'description' => E::ts('FK to bank_account of target account'),
          'where' => 'civicrm_bank_tx.ba_id',
          'table_name' => 'civicrm_bank_tx',
          'entity' => 'BankTransaction',
          'bao' => 'CRM_Banking_DAO_BankTransaction',
          'localizable' => 0,
          'FKClassName' => 'CRM_Banking_DAO_BankAccount',
          'add' => '4.3',
        ],
        'party_ba_id' => [
          'name' => 'party_ba_id',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('Party Bank Account ID'),
          'description' => E::ts('FK to bank_account of party account'),
          'where' => 'civicrm_bank_tx.party_ba_id',
          'table_name' => 'civicrm_bank_tx',
          'entity' => 'BankTransaction',
          'bao' => 'CRM_Banking_DAO_BankTransaction',
          'localizable' => 0,
          'FKClassName' => 'CRM_Banking_DAO_BankAccount',
          'add' => '4.3',
        ],
        'tx_batch_id' => [
          'name' => 'tx_batch_id',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('Bank Transaction Batch ID'),
          'description' => E::ts('FK to parent bank_tx_batch'),
          'where' => 'civicrm_bank_tx.tx_batch_id',
          'table_name' => 'civicrm_bank_tx',
          'entity' => 'BankTransaction',
          'bao' => 'CRM_Banking_DAO_BankTransaction',
          'localizable' => 0,
          'FKClassName' => 'CRM_Banking_DAO_BankTransactionBatch',
          'add' => '4.3',
        ],
        'sequence' => [
          'name' => 'sequence',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('Sequence in statement'),
          'description' => E::ts('Numbering local to the tx_batch_id'),
          'where' => 'civicrm_bank_tx.sequence',
          'table_name' => 'civicrm_bank_tx',
          'entity' => 'BankTransaction',
          'bao' => 'CRM_Banking_DAO_BankTransaction',
          'localizable' => 0,
          'add' => '4.3',
        ],
        'suggestions' => [
          'name' => 'suggestions',
          'type' => CRM_Utils_Type::T_TEXT,
          'title' => E::ts('Suggestions'),
          'description' => E::ts('A JSON-formatted array containing suggestions'),
          'where' => 'civicrm_bank_tx.suggestions',
          'table_name' => 'civicrm_bank_tx',
          'entity' => 'BankTransaction',
          'bao' => 'CRM_Banking_DAO_BankTransaction',
          'localizable' => 0,
          'add' => '4.3',
        ],
      ];
      CRM_Core_DAO_AllCoreTables::invoke(__CLASS__, 'fields_callback', Civi::$statics[__CLASS__]['fields']);
    }
    return Civi::$statics[__CLASS__]['fields'];
  }

  /**
   * Return a mapping from field-name to the corresponding key (as used in fields()).
   *
   * @return array
   *   Array(string $name => string $uniqueName).
   */
  public static function &fieldKeys() {
    if (!isset(Civi::$statics[__CLASS__]['fieldKeys'])) {
      Civi::$statics[__CLASS__]['fieldKeys'] = array_flip(CRM_Utils_Array::collect('name', self::fields()));
    }
    return Civi::$statics[__CLASS__]['fieldKeys'];
  }

  /**
   * Returns the names of this table
   *
   * @return string
   */
  public static function getTableName() {
    return self::$_tableName;
  }

  /**
   * Returns if this table needs to be logged
   *
   * @return bool
   */
  public function getLog() {
    return self::$_log;
  }

  /**
   * Returns the list of fields that can be imported
   *
   * @param bool $prefix
   *
   * @return array
   */
  public static function &import($prefix = FALSE) {
    $r = CRM_Core_DAO_AllCoreTables::getImports(__CLASS__, 'bank_tx', $prefix, []);
    return $r;
  }

  /**
   * Returns the list of fields that can be exported
   *
   * @param bool $prefix
   *
   * @return array
   */
  public static function &export($prefix = FALSE) {
    $r = CRM_Core_DAO_AllCoreTables::getExports(__CLASS__, 'bank_tx', $prefix, []);
    return $r;
  }

  /**
   * Returns the list of indices
   *
   * @param bool $localize
   *
   * @return array
   */
  public static function indices($localize = TRUE) {
    $indices = [
      'bank_reference' => [
        'name' => 'bank_reference',
        'field' => [
          0 => 'bank_reference',
        ],
        'localizable' => FALSE,
        'unique' => TRUE,
        'sig' => 'civicrm_bank_tx::1::bank_reference',
      ],
    ];
    return ($localize && !empty($indices)) ? CRM_Core_DAO_AllCoreTables::multilingualize(__CLASS__, $indices) : $indices;
  }

}
