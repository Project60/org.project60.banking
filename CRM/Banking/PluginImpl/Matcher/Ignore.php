<?php
/*-------------------------------------------------------+
| Project 60 - CiviBanking                               |
| Copyright (C) 2013-2018 SYSTOPIA                       |
| Author: B. Endres (endres -at- systopia.de)            |
| http://www.systopia.de/                                |
+--------------------------------------------------------+
| This program is released as free software under the    |
| Affero GPL v3 license. You can redistribute it and/or  |
| modify it under the terms of this license which you    |
| can read by viewing the included agpl.txt or online    |
| at www.gnu.org/licenses/agpl.html. Removal of this     |
| copyright header is strictly prohibited without        |
| written permission from the original author(s).        |
+--------------------------------------------------------*/

use CRM_Banking_ExtensionUtil as E;

/**
 * The Ignore matcher can be configured with regular expressions to automatically ignore
 *   certain payments
 */
class CRM_Banking_PluginImpl_Matcher_Ignore extends CRM_Banking_PluginModel_Matcher {

  /**
   * class constructor
   */
  function __construct($config_name) {
    parent::__construct($config_name);
    $config = $this->_plugin_config;
    if (!isset($config->ignore)) $config->ignore = array();
    if (!isset($config->dont_ignore)) $config->dont_ignore = array();
  }


  /** 
   * Generate a set of suggestions for the given bank transaction
   * 
   * @return array(match structures)
   */
  public function match(CRM_Banking_BAO_BankTransaction $btx, CRM_Banking_Matcher_Context $context) {

    // this section will be refactored to use different conditions, but for now, this is hardcoded
    $suggestion = new CRM_Banking_Matcher_Suggestion($this, $btx);

    $config = $this->_plugin_config;
    $threshold   = $this->getThreshold();
    $penalty     = $this->getPenalty($btx);

    if (isset($config->ignore)) {
      // iterate through the ignore list
      foreach ($config->ignore as $ignore_record) {
        if ($this->matches_pattern($ignore_record, $btx, $context)) {
          $ignore_this = TRUE;
          // this $btx is to be ignored, but check if it happens to be on the "don't ignore" list
          foreach ($config->dont_ignore as $dont_ignore_record) {
            if ($this->matches_pattern($dont_ignore_record, $btx, $context)) {
              // ok, this should not be ignored after all...
              $ignore_this = FALSE;
              break;  // doesn't matter why it should not be ignored
            }
          }

          if ($ignore_this) {


            if (isset($ignore_record->precision)) {
              $probability = $ignore_record->precision;
            } else {
              $probability = 1.0;
            }
            $probability -= $penalty;
            $suggestion->addEvidence($probability, $ignore_record->message);
          }
        }
      }
    }

    if ($suggestion->getProbability() >= $threshold) {
      $btx->addSuggestion($suggestion);
    }

    // that's it...
    return empty($this->_suggestions) ? null : $this->_suggestions;
  }


  /**
   * Handle the different actions, should probably be handles at base class level ...
   * 
   * @param type $match
   * @param type $btx
   */
  public function execute($suggestion, $btx) {
    // this is the IGNORE action. Simply set the status to ignored
    $newStatus = banking_helper_optionvalueid_by_groupname_and_name('civicrm_banking.bank_tx_status', 'Ignored');
    $btx->setStatus($newStatus);
    parent::execute($suggestion, $btx);
    return true;
  }


  /**
   * check if this ignore pattern applies to this btx
   */
  private function matches_pattern($ignore_record, CRM_Banking_BAO_BankTransaction $btx, CRM_Banking_Matcher_Context $context) {
    // collect all the fields
    $fields = array();
    if (isset($ignore_record->field)) {
      array_push($fields, $ignore_record->field);
    }

    if (isset($ignore_record->fields)) {
      $fields = array_merge($fields, $ignore_record->fields);
    }

    // extract the values
    $values = array();
    foreach ($fields as $field) {
      if (isset($btx->$field)) {
        array_push($values, $btx->$field);
      } else {
        $data = $btx->getDataParsed();
        if (isset($data[$field])) {
          array_push($values, $data[$field]);
        }
      }
    }

    if (isset($ignore_record->regex)) {
      foreach ($values as $value) {
        if (preg_match($ignore_record->regex, $value)) {
          return true;
        }
      }
    }
    
    return false;
  }
  

  /** 
   * Generate html code to visualize the executed match.
   * 
   * @val $match    match data as previously generated by this plugin instance
   * @val $btx      the bank transaction the match refers to
   * @return html code snippet
   */  
  function visualize_execution_info( CRM_Banking_Matcher_Suggestion $match, $btx) {
    $html = "<p>".E::ts("Because :")."<ul>";
    $evidence = $match->getEvidence();
    foreach ($evidence as $ev) {
      $html .= '<li>' . $ev . '</li>';
    }
    $html .= '</ul></p>';
    return $html;
  }

}

