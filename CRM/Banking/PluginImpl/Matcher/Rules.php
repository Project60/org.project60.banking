<?php
/*-------------------------------------------------------+
| Project 60 - CiviBanking                               |
| Copyright (C) 2018 SYSTOPIA                            |
| Author: B. Endres (endres -at- systopia.de)            |
|         R. Lott (hello -at- artfulrobot.uk)            |
| http://www.systopia.de/                                |
+--------------------------------------------------------+
| This program is released as free software under the    |
| Affero GPL v3 license. You can redistribute it and/or  |
| modify it under the terms of this license which you    |
| can read by viewing the included agpl.txt or online    |
| at www.gnu.org/licenses/agpl.html. Removal of this     |
| copyright header is strictly prohibited without        |
| written permission from the original author(s).        |
+--------------------------------------------------------*/

/**
 *
 * CAUTION: NOT FULLY IMPLEMENTED YET
 *
 */

require_once 'CRM/Banking/Helpers/OptionValue.php';

/**
 * This matcher will try to match any transaction
 *  to the rules recorded in a rule table
 *
 * It will also offer the user to to create new rules
 */
class CRM_Banking_PluginImpl_Matcher_Rules extends CRM_Banking_PluginModel_Matcher {

  /**
   * class constructor
   */
  function __construct($config_name) {
    parent::__construct($config_name);

    // read config, set defaults
    $config = $this->_plugin_config;

    // TODO: set default parameters like this:
    // if (!isset($config->threshold)) $config->threshold = 0.5;
  }

  /**
   * Generate a set of suggestions for the given bank transaction
   *
   * @return array(match structures)
   */
  public function match(CRM_Banking_BAO_BankTransaction $btx, CRM_Banking_Matcher_Context $context) {
    $config      = $this->_plugin_config;
    $threshold   = $this->getThreshold();
    $penalty     = $this->getPenalty($btx);

    // run the rule matcher
    $rule_matches = CRM_Banking_Rules_Match::matchTransaction($btx, $config->field_mapping, $context, $threshold);

    // generate a suggestion for each match
    foreach ($rule_matches as $rule_match) {
      $suggestion = new CRM_Banking_Matcher_Suggestion($this, $btx);
      $suggestion->setParameter('mode', 'matched');
      $suggestion->setParameter('rule_id', $rule_match->getRule()->getID());
      $suggestion->setProbability($rule_match->getConfidence() - $penalty);
      $btx->addSuggestion($suggestion);
    }

    // if there has been no matches, add a 'create rule' match
    if (empty($rule_matches)) {
      $suggestion = new CRM_Banking_Matcher_Suggestion($this, $btx);
      $suggestion->setParameter('mode', 'new');
      $btx->addSuggestion($suggestion);
    }

    return $this->_suggestions;
  }

  /**
   * Handle the different actions, should probably be handles at base class level ...
   *
   * @param type $match
   * @param type $btx
   */
  public function execute($match, $btx) {
    if (!$rule) {
      CRM_Core_Session::setStatus(ts("You cannot "), ts('Error'), 'error');
      return;
    }

    $rule_id = $match->getParameter('rule_id');
    $rule = CRM_Banking_Rules_Rule::get($rule_id);

    // execute rule
    $rule_match = new CRM_Banking_Rules_Match($rule, $btx);
    $rule_match->execute($match);

    // update status
    $newStatus = banking_helper_optionvalueid_by_groupname_and_name('civicrm_banking.bank_tx_status', 'Processed');
    $btx->setStatus($newStatus);
    parent::execute($match, $btx);
    return true;
  }

  /**
   * If the user has modified the input fields provided by the "visualize" html code,
   * the new values will be passed here BEFORE execution
   *
   * CAUTION: there might be more parameters than provided. Only process the ones that
   *  'belong' to your suggestion.
   */
  public function update_parameters(CRM_Banking_Matcher_Suggestion $match, $parameters) {
    // TODO: implement
    // $config = $this->_plugin_config;
    // if ($match->getParameter('cancellation_mode')) {
    //   // store potentially modified extended cancellation values
    //   if ($config->cancellation_cancel_reason) {
    //     $match->setParameter('cancel_reason', $parameters['cancel_reason']);
    //   }
    //   if ($config->cancellation_cancel_fee) {
    //     $match->setParameter('cancel_fee', number_format((float) $parameters['cancel_fee'], 2));
    //   }
    // }
  }

 /**
   * Generate html code to visualize the given match. The visualization may also provide interactive form elements.
   *
   * @val $match    match data as previously generated by this plugin instance
   * @val $btx      the bank transaction the match refers to
   * @return html code snippet
   */
  function visualize_match( CRM_Banking_Matcher_Suggestion $match, $btx) {
    $config = $this->_plugin_config;
    $smarty_vars = array();

    // add mode
    $smarty_vars['mode']    = $match->getParameter('mode');
    $smarty_vars['rule_id'] = $match->getParameter('rule_id');

    // load the rule
    $rule_id = $match->getParameter('rule_id');
    $rule = CRM_Banking_Rules_Rule::get($rule_id);
    if ($rule) {
      $rule->addRenderParameters($smarty_vars);
    }

    // render template
    $smarty = CRM_Banking_Helpers_Smarty::singleton();
    $smarty->pushScope($smarty_vars);
    $html_snippet = $smarty->fetch('CRM/Banking/PluginImpl/Matcher/Rules.suggestion.tpl');
    $smarty->popScope();
    return $html_snippet;
  }

  /**
   * Generate html code to visualize the executed match.
   *
   * @val $match    match data as previously generated by this plugin instance
   * @val $btx      the bank transaction the match refers to
   * @return html code snippet
   */
  function visualize_execution_info( CRM_Banking_Matcher_Suggestion $match, $btx) {
    // just assign to smarty and compile HTML
    $smarty_vars = array();
    $smarty_vars['contribution_id'] = $match->getParameter('contribution_id');
    $smarty_vars['rule_id'] = $match->getParameter('rule_id');

    $smarty = CRM_Banking_Helpers_Smarty::singleton();
    $smarty->pushScope($smarty_vars);
    $html_snippet = $smarty->fetch('CRM/Banking/PluginImpl/Matcher/Rules.execution.tpl');
    $smarty->popScope();
    return $html_snippet;
  }
}

